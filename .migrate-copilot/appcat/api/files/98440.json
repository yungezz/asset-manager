{"id":"98440","content":"package com.microsoft.migration.assets.service;\r\n\r\nimport com.microsoft.migration.assets.model.ImageProcessingMessage;\r\nimport com.microsoft.migration.assets.model.S3StorageItem;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Profile;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.util.StringUtils;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport jakarta.annotation.PostConstruct;\r\nimport java.io.*;\r\nimport java.nio.file.*;\r\nimport java.nio.file.attribute.BasicFileAttributes;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static com.microsoft.migration.assets.config.RabbitConfig.IMAGE_PROCESSING_QUEUE;\r\n\r\n@Service\r\n@Profile(\"dev\") // Only active when dev profile is active\r\npublic class LocalFileStorageService implements StorageService {\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(LocalFileStorageService.class);\r\n    \r\n    private final RabbitTemplate rabbitTemplate;\r\n    \r\n    @Value(\"${local.storage.directory:../storage}\")\r\n    private String storageDirectory;\r\n    \r\n    private Path rootLocation;\r\n\r\n    public LocalFileStorageService(RabbitTemplate rabbitTemplate) {\r\n        this.rabbitTemplate = rabbitTemplate;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void init() throws IOException {\r\n        rootLocation = Paths.get(storageDirectory).toAbsolutePath().normalize();\r\n        logger.info(\"Local storage directory: {}\", rootLocation);\r\n        \r\n        // Create directory if it doesn't exist\r\n        if (!Files.exists(rootLocation)) {\r\n            Files.createDirectories(rootLocation);\r\n            logger.info(\"Created local storage directory\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<S3StorageItem> listObjects() {\r\n        try {\r\n            return Files.walk(rootLocation, 1)\r\n                .filter(path -> !path.equals(rootLocation))\r\n                .map(path -> {\r\n                    try {\r\n                        String filename = path.getFileName().toString();\r\n                        BasicFileAttributes attrs = Files.readAttributes(path, BasicFileAttributes.class);\r\n                        return new S3StorageItem(\r\n                            filename,\r\n                            filename,\r\n                            Files.size(path),\r\n                            attrs.lastModifiedTime().toInstant(),\r\n                            attrs.creationTime().toInstant(),\r\n                            generateUrl(filename)\r\n                        );\r\n                    } catch (IOException e) {\r\n                        logger.error(\"Failed to read file attributes\", e);\r\n                        return null;\r\n                    }\r\n                })\r\n                .filter(s3StorageItem -> s3StorageItem != null)\r\n                .collect(Collectors.toList());\r\n        } catch (IOException e) {\r\n            logger.error(\"Failed to list files\", e);\r\n            return new ArrayList<>();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void uploadObject(MultipartFile file) throws IOException {\r\n        if (file.isEmpty()) {\r\n            throw new IOException(\"Failed to store empty file\");\r\n        }\r\n        \r\n        String filename = StringUtils.cleanPath(file.getOriginalFilename());\r\n        if (filename.contains(\"..\")) {\r\n            throw new IOException(\"Cannot store file with relative path outside current directory\");\r\n        }\r\n        \r\n        Path targetLocation = rootLocation.resolve(filename);\r\n        Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);\r\n        logger.info(\"Stored file: {}\", targetLocation);\r\n\r\n        // Send message to queue for thumbnail generation\r\n        ImageProcessingMessage message = new ImageProcessingMessage(\r\n            filename,\r\n            file.getContentType(),\r\n            getStorageType(),\r\n            file.getSize()\r\n        );\r\n        rabbitTemplate.convertAndSend(IMAGE_PROCESSING_QUEUE, message);\r\n    }\r\n\r\n    @Override\r\n    public InputStream getObject(String key) throws IOException {\r\n        Path file = rootLocation.resolve(key);\r\n        if (!Files.exists(file)) {\r\n            throw new FileNotFoundException(\"File not found: \" + key);\r\n        }\r\n        return new BufferedInputStream(Files.newInputStream(file));\r\n    }\r\n\r\n    @Override\r\n    public void deleteObject(String key) throws IOException {\r\n        // Delete both original and thumbnail if it exists\r\n        Path file = rootLocation.resolve(key);\r\n        if (!Files.exists(file)) {\r\n            throw new FileNotFoundException(\"File not found: \" + key);\r\n        }\r\n        Files.delete(file);\r\n        logger.info(\"Deleted file: {}\", file);\r\n\r\n        // Try to delete thumbnail if it exists\r\n        try {\r\n            Path thumbnailFile = rootLocation.resolve(getThumbnailKey(key));\r\n            if (Files.exists(thumbnailFile)) {\r\n                Files.delete(thumbnailFile);\r\n                logger.info(\"Deleted thumbnail file: {}\", thumbnailFile);\r\n            }\r\n        } catch (Exception e) {\r\n            // Ignore if thumbnail doesn't exist or can't be deleted\r\n            logger.warn(\"Could not delete thumbnail for {}: {}\", key, e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String getStorageType() {\r\n        return \"local\";\r\n    }\r\n    \r\n    private String generateUrl(String key) {\r\n        // Generate a URL for the object (simplified path)\r\n        return \"/s3/view/\" + key;\r\n    }\r\n}"}