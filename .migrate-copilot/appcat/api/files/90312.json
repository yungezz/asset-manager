{"id":"90312","content":"package com.microsoft.migration.assets.worker.service;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Profile;\r\nimport org.springframework.stereotype.Service;\r\nimport jakarta.annotation.PostConstruct;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.nio.file.StandardCopyOption;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n@Service\r\n@Profile(\"dev\")\r\npublic class LocalFileProcessingService extends AbstractFileProcessingService {\r\n    \r\n    private static final Logger logger = LoggerFactory.getLogger(LocalFileProcessingService.class);\r\n    \r\n    @Value(\"${local.storage.directory:../storage}\")\r\n    private String storageDirectory;\r\n    \r\n    private Path rootLocation;\r\n    \r\n    @PostConstruct\r\n    public void init() throws Exception {\r\n        rootLocation = Paths.get(storageDirectory).toAbsolutePath().normalize();\r\n        logger.info(\"Local storage directory: {}\", rootLocation);\r\n        \r\n        if (!Files.exists(rootLocation)) {\r\n            Files.createDirectories(rootLocation);\r\n            logger.info(\"Created local storage directory\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void downloadOriginal(String key, Path destination) throws Exception {\r\n        Path sourcePath = rootLocation.resolve(key);\r\n        if (!Files.exists(sourcePath)) {\r\n            throw new java.io.FileNotFoundException(\"File not found: \" + sourcePath);\r\n        }\r\n        Files.copy(sourcePath, destination, StandardCopyOption.REPLACE_EXISTING);\r\n    }\r\n\r\n    @Override\r\n    public void uploadThumbnail(Path source, String key, String contentType) throws Exception {\r\n        Path destinationPath = rootLocation.resolve(key);\r\n        Files.createDirectories(destinationPath.getParent());\r\n        Files.copy(source, destinationPath, StandardCopyOption.REPLACE_EXISTING);\r\n    }\r\n\r\n    @Override\r\n    public String getStorageType() {\r\n        return \"local\";\r\n    }\r\n\r\n    @Override\r\n    protected String generateUrl(String key) {\r\n        // For local storage, we'll just return the relative path\r\n        return \"/storage/\" + key;\r\n    }\r\n}"}