{"id":"82144","content":"package com.microsoft.migration.assets.service;\r\n\r\nimport com.microsoft.migration.assets.model.ImageMetadata;\r\nimport com.microsoft.migration.assets.model.ImageProcessingMessage;\r\nimport com.microsoft.migration.assets.model.S3StorageItem;\r\nimport com.microsoft.migration.assets.repository.ImageMetadataRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Profile;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport software.amazon.awssdk.core.sync.RequestBody;\r\nimport software.amazon.awssdk.services.s3.S3Client;\r\nimport software.amazon.awssdk.services.s3.model.*;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.time.Instant;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static com.microsoft.migration.assets.config.RabbitConfig.IMAGE_PROCESSING_QUEUE;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\n@Profile(\"!dev\") // Active when not in dev profile\r\npublic class AwsS3Service implements StorageService {\r\n\r\n    private final S3Client s3Client;\r\n    private final RabbitTemplate rabbitTemplate;\r\n    private final ImageMetadataRepository imageMetadataRepository;\r\n\r\n    @Value(\"${aws.s3.bucket}\")\r\n    private String bucketName;\r\n\r\n    @Override\r\n    public List<S3StorageItem> listObjects() {\r\n        ListObjectsV2Request request = ListObjectsV2Request.builder()\r\n                .bucket(bucketName)\r\n                .build();\r\n\r\n        ListObjectsV2Response response = s3Client.listObjectsV2(request);\r\n\r\n        return response.contents().stream()\r\n                .map(s3Object -> {\r\n                    // Try to get metadata for upload time\r\n                    Instant uploadedAt = imageMetadataRepository.findAll().stream()\r\n                            .filter(metadata -> metadata.getS3Key().equals(s3Object.key()))\r\n                            .map(metadata -> metadata.getUploadedAt().atZone(java.time.ZoneId.systemDefault()).toInstant())\r\n                            .findFirst()\r\n                            .orElse(s3Object.lastModified()); // fallback to lastModified if metadata not found\r\n\r\n                    return new S3StorageItem(\r\n                            s3Object.key(),\r\n                            extractFilename(s3Object.key()),\r\n                            s3Object.size(),\r\n                            s3Object.lastModified(),\r\n                            uploadedAt,\r\n                            generateUrl(s3Object.key())\r\n                    );\r\n                })\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public void uploadObject(MultipartFile file) throws IOException {\r\n        String key = generateKey(file.getOriginalFilename());\r\n        \r\n        PutObjectRequest request = PutObjectRequest.builder()\r\n                .bucket(bucketName)\r\n                .key(key)\r\n                .contentType(file.getContentType())\r\n                .build();\r\n        \r\n        s3Client.putObject(request, RequestBody.fromInputStream(file.getInputStream(), file.getSize()));\r\n\r\n        // Send message to queue for thumbnail generation\r\n        ImageProcessingMessage message = new ImageProcessingMessage(\r\n            key,\r\n            file.getContentType(),\r\n            getStorageType(),\r\n            file.getSize()\r\n        );\r\n        rabbitTemplate.convertAndSend(IMAGE_PROCESSING_QUEUE, message);\r\n\r\n        // Create and save metadata to database\r\n        ImageMetadata metadata = new ImageMetadata();\r\n        metadata.setId(UUID.randomUUID().toString());\r\n        metadata.setFilename(file.getOriginalFilename());\r\n        metadata.setContentType(file.getContentType());\r\n        metadata.setSize(file.getSize());\r\n        metadata.setS3Key(key);\r\n        metadata.setS3Url(generateUrl(key));\r\n        \r\n        imageMetadataRepository.save(metadata);\r\n    }\r\n\r\n    @Override\r\n    public InputStream getObject(String key) throws IOException {\r\n        GetObjectRequest request = GetObjectRequest.builder()\r\n                .bucket(bucketName)\r\n                .key(key)\r\n                .build();\r\n        \r\n        return s3Client.getObject(request);\r\n    }\r\n\r\n    @Override\r\n    public void deleteObject(String key) throws IOException {\r\n        // Delete both original and thumbnail if it exists\r\n        DeleteObjectRequest request = DeleteObjectRequest.builder()\r\n                .bucket(bucketName)\r\n                .key(key)\r\n                .build();\r\n        \r\n        s3Client.deleteObject(request);\r\n\r\n        try {\r\n            // Try to delete thumbnail if it exists\r\n            DeleteObjectRequest thumbnailRequest = DeleteObjectRequest.builder()\r\n                    .bucket(bucketName)\r\n                    .key(getThumbnailKey(key))\r\n                    .build();\r\n            s3Client.deleteObject(thumbnailRequest);\r\n        } catch (Exception e) {\r\n            // Ignore if thumbnail doesn't exist\r\n        }\r\n\r\n        // Delete metadata from database\r\n        imageMetadataRepository.findAll().stream()\r\n                .filter(metadata -> metadata.getS3Key().equals(key))\r\n                .findFirst()\r\n                .ifPresent(metadata -> imageMetadataRepository.delete(metadata));\r\n    }\r\n\r\n    @Override\r\n    public String getStorageType() {\r\n        return \"s3\";\r\n    }\r\n\r\n    private String extractFilename(String key) {\r\n        // Extract filename from the object key\r\n        int lastSlashIndex = key.lastIndexOf('/');\r\n        return lastSlashIndex >= 0 ? key.substring(lastSlashIndex + 1) : key;\r\n    }\r\n    \r\n    private String generateUrl(String key) {\r\n        GetUrlRequest request = GetUrlRequest.builder()\r\n                .bucket(bucketName)\r\n                .key(key)\r\n                .build();\r\n        return s3Client.utilities().getUrl(request).toString();\r\n    }\r\n\r\n    private String generateKey(String filename) {\r\n        return UUID.randomUUID().toString() + \"-\" + filename;\r\n    }\r\n}"}