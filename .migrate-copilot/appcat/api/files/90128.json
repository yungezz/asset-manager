{"id":"90128","content":"package com.microsoft.migration.assets.worker.service;\r\n\r\nimport com.microsoft.migration.assets.worker.repository.ImageMetadataRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Profile;\r\nimport org.springframework.stereotype.Service;\r\nimport software.amazon.awssdk.core.sync.RequestBody;\r\nimport software.amazon.awssdk.services.s3.S3Client;\r\nimport software.amazon.awssdk.services.s3.model.GetObjectRequest;\r\nimport software.amazon.awssdk.services.s3.model.GetUrlRequest;\r\nimport software.amazon.awssdk.services.s3.model.PutObjectRequest;\r\n\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.StandardCopyOption;\r\n\r\n@Service\r\n@Profile(\"!dev\")\r\n@RequiredArgsConstructor\r\npublic class S3FileProcessingService extends AbstractFileProcessingService {\r\n    private final S3Client s3Client;\r\n    private final ImageMetadataRepository imageMetadataRepository;\r\n    \r\n    @Value(\"${aws.s3.bucket}\")\r\n    private String bucketName;\r\n\r\n    @Override\r\n    public void downloadOriginal(String key, Path destination) throws Exception {\r\n        GetObjectRequest request = GetObjectRequest.builder()\r\n                .bucket(bucketName)\r\n                .key(key)\r\n                .build();\r\n                \r\n        try (var inputStream = s3Client.getObject(request)) {\r\n            Files.copy(inputStream, destination, StandardCopyOption.REPLACE_EXISTING);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void uploadThumbnail(Path source, String key, String contentType) throws Exception {\r\n        PutObjectRequest request = PutObjectRequest.builder()\r\n                .bucket(bucketName)\r\n                .key(key)\r\n                .contentType(contentType)\r\n                .build();\r\n                \r\n        s3Client.putObject(request, RequestBody.fromFile(source));\r\n\r\n        // Extract the original key from the thumbnail key\r\n        String originalKey = extractOriginalKey(key);\r\n        \r\n        // Find and update metadata\r\n        imageMetadataRepository.findAll().stream()\r\n            .filter(metadata -> metadata.getS3Key().equals(originalKey))\r\n            .findFirst()\r\n            .ifPresent(metadata -> {\r\n                metadata.setThumbnailKey(key);\r\n                metadata.setThumbnailUrl(generateUrl(key));\r\n                imageMetadataRepository.save(metadata);\r\n            });\r\n    }\r\n\r\n    @Override\r\n    public String getStorageType() {\r\n        return \"s3\";\r\n    }\r\n\r\n    @Override\r\n    protected String generateUrl(String key) {\r\n        GetUrlRequest request = GetUrlRequest.builder()\r\n                .bucket(bucketName)\r\n                .key(key)\r\n                .build();\r\n        return s3Client.utilities().getUrl(request).toString();\r\n    }\r\n\r\n    private String extractOriginalKey(String key) {\r\n        // For a key like \"xxxxx_thumbnail.png\", get \"xxxxx.png\"\r\n        String suffix = \"_thumbnail\";\r\n        int extensionIndex = key.lastIndexOf('.');\r\n        if (extensionIndex > 0) {\r\n            String nameWithoutExtension = key.substring(0, extensionIndex);\r\n            String extension = key.substring(extensionIndex);\r\n            \r\n            int suffixIndex = nameWithoutExtension.lastIndexOf(suffix);\r\n            if (suffixIndex > 0) {\r\n                return nameWithoutExtension.substring(0, suffixIndex) + extension;\r\n            }\r\n        }\r\n        return key;\r\n    }\r\n}"}