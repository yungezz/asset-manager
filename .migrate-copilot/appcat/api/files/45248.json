{"id":"45248","content":"package com.microsoft.migration.assets.service;\r\n\r\nimport com.microsoft.migration.assets.model.ImageProcessingMessage;\r\nimport com.rabbitmq.client.Channel;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\r\nimport org.springframework.amqp.support.AmqpHeaders;\r\nimport org.springframework.messaging.handler.annotation.Header;\r\nimport org.springframework.context.annotation.Profile;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport static com.microsoft.migration.assets.config.RabbitConfig.IMAGE_PROCESSING_QUEUE;\r\n\r\nimport java.io.IOException;\r\n\r\n/**\r\n * A backup message processor that serves as a monitoring and logging service.\r\n * \r\n * Only enabled when the \"backup\" profile is active.\r\n */\r\n@Slf4j\r\n@Component\r\n@Profile(\"backup\") \r\npublic class BackupMessageProcessor {\r\n\r\n    /**\r\n     * Processes image messages from a backup queue for monitoring and resilience purposes.\r\n     * Uses the same RabbitMQ API pattern as the worker module.\r\n     */\r\n    @RabbitListener(queues = IMAGE_PROCESSING_QUEUE)\r\n    public void processBackupMessage(final ImageProcessingMessage message, \r\n                                    Channel channel, \r\n                                    @Header(AmqpHeaders.DELIVERY_TAG) long deliveryTag) {\r\n        try {\r\n            log.info(\"[BACKUP] Monitoring message: {}\", message.getKey());\r\n            log.info(\"[BACKUP] Content type: {}, Storage: {}, Size: {}\", \r\n                    message.getContentType(), message.getStorageType(), message.getSize());\r\n            \r\n            // Acknowledge the message\r\n            channel.basicAck(deliveryTag, false);\r\n            log.info(\"[BACKUP] Successfully processed message: {}\", message.getKey());\r\n        } catch (Exception e) {\r\n            log.error(\"[BACKUP] Failed to process message: \" + message.getKey(), e);\r\n            \r\n            try {\r\n                // Reject the message and requeue it\r\n                channel.basicNack(deliveryTag, false, true);\r\n                log.warn(\"[BACKUP] Message requeued: {}\", message.getKey());\r\n            } catch (IOException ackEx) {\r\n                log.error(\"[BACKUP] Error handling RabbitMQ acknowledgment: {}\", message.getKey(), ackEx);\r\n            }\r\n        }\r\n    }\r\n}"}