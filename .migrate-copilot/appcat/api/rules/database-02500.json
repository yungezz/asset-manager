{"id":"database-02500","content":"<rule id=\"database-02500\" xmlns=\"http://windup.jboss.org/schema/jboss-ruleset\">\n            <when>\n                <or>\n                    <file filename=\"{*}mongodb{*}.jar\"/>\n                    <file filename=\"{*}casbah{*}.jar\"/>\n                    <file filename=\"{*}reactivemongo{*}.jar\"/>\n                    <file filename=\"{*}jongo{*}.jar\"/>\n                    <file filename=\"{*}gmongo{*}.jar\"/>\n                    <file filename=\"{*}rogue{*}.jar\"/>\n                </or>\n            </when>\n            <perform>\n                <hint category-id=\"potential\" effort=\"3\" title=\"MongoDB database found\">\n                    <message>\n                        To migrate a Java application that uses a MongoDB database to Azure, you can follow these recommendations:\n\n                        * Use a managed **Azure Cosmos DB for MongoDB**: Create a managed Cosmos DB for MongoDB database in Azure and choose the appropriate pricing tier based on your application's requirements for performance, storage, and availability.\n\n                        * **Migrate your MongoDB data**: Take a backup of your MongoDB data and restore the backup to Azure Cosmos DB for MongoDB. You can use Azure Database Migration Service to facilitate the backup and restore process.\n\n                        * Update the application's **database connection** details: Modify your Java application's configuration to point to the new Azure Cosmos DB for MongoDB instance. Update the connection string and authentication details in your application code to ensure connectivity to Azure Cosmos DB.\n\n                        * Enable **monitoring and diagnostics**: Utilize Azure Monitor to gain insights into the performance and health of your Java application and the underlying Azure Cosmos DB for MongoDB database. Set up metrics, alerts, and log analytics to proactively identify and resolve issues.\n\n                        * Implement **security** measures: Apply security best practices to protect your Java application and the Azure Cosmos DB for MongoDB database. This includes implementing authentication and authorization mechanisms with passwordless connections and leveraging Microsoft Defender for Cloud for threat detection and vulnerability assessments.\n\n                        * **Backup** your data: Azure Cosmos DB provides built-in backup functionality that allows you to create automated backups of your data. Enable backup for your Azure Cosmos DB account and configure the backup retention policy to specify how long the backups should be retained.\n                    </message>\n                    <link href=\"https://learn.microsoft.com/azure/cosmos-db/mongodb\" title=\"Azure Cosmos DB for MongoDB documentation\"/>\n                    <link href=\"https://learn.microsoft.com/azure/dms\" title=\"Azure Database Migration Service documentation\"/>\n                    <link href=\"https://learn.microsoft.com/azure/azure-monitor\" title=\"Azure Monitor documentation\"/>\n                    <link href=\"https://learn.microsoft.com/azure/defender-for-cloud\" title=\"Microsoft Defender for Cloud\"/>\n                </hint>\n                <technology-tag level=\"INFORMATIONAL\">MongoDB Client</technology-tag>\n            </perform>\n        </rule>"}